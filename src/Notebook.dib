#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Training Machine Learning Models

#!csharp

#r "nuget:Microsoft.Data.Analysis,0.21.1"
#r "nuget:Microsoft.ML,3.0.1"
#r "nuget:Microsoft.ML.AutoML,0.21.1"

using Microsoft.Data.Analysis;
using Microsoft.ML;
using Microsoft.ML.AutoML;
using Microsoft.ML.Data;

var df = DataFrame.LoadCsv("training.csv");

#!csharp

MLContext context = new(seed: 42);

#!csharp

df.Columns.Remove("Sales Tier");
df.Columns.Remove("Employee Job Title");

#!csharp

df.Head(1)

#!csharp

var split = context.Data.TrainTestSplit(df, testFraction: 0.3);

#!markdown

## Binary Classification

#!csharp

BinaryExperimentSettings settings = new() {
  MaxModels = 5,
  OptimizingMetric = BinaryClassificationMetric.F1Score
};

var experiment = context.Auto().CreateBinaryClassificationExperiment(settings);

#!csharp

var results = experiment.Execute(split.TrainSet, split.TestSet, labelColumnName: "Is Senior Sales");

results

#!markdown

### Evaluating Classification Models

#!csharp

RunDetail<BinaryClassificationMetrics> bestRun = results.BestRun;

#!csharp

bestRun.ValidationMetrics

#!csharp

bestRun.ValidationMetrics.ConfusionMatrix.GetFormattedConfusionTable()

#!markdown

## Training Regression Models

#!csharp

RegressionExperimentSettings settings = new() {
  MaxModels = 5,
  OptimizingMetric = RegressionMetric.MeanAbsoluteError
};

var experiment = context.Auto().CreateRegressionExperiment(settings);

#!csharp

var results = experiment.Execute(split.TrainSet, split.TestSet, labelColumnName: "Quantity");

#!csharp

results

#!markdown

### Evaluating Regression Metrics

#!csharp

results.BestRun.ValidationMetrics
